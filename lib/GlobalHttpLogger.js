"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _http = _interopRequireDefault(require("http"));

var _https = _interopRequireDefault(require("https"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const matches = process.version.match(/^v(\d+)\.(\d+)\.(\d+)$/);
const nodeMajorVersion = matches ? +matches[1] : 0;

class ResponseBodyCollector {
  constructor(response) {
    _defineProperty(this, "buffers", void 0);

    _defineProperty(this, "bodyPromise", void 0);

    this.buffers = [];
    this.bodyPromise = new Promise((resolve, reject) => {
      response.prependListener('data', chunk => {
        this.buffers.push(chunk);
      });
      response.prependListener('end', () => {
        const body = Buffer.concat(this.buffers);
        resolve(body);
      });
    });
  }

  getBodyAsync() {
    return this.bodyPromise;
  }

}

const waitForResponseOrError = request => new Promise((resolve, reject) => {
  request.prependOnceListener('response', response => {
    const responseBodyCollector = new ResponseBodyCollector(response);
    resolve({
      response,
      responseBodyCollector
    });
  });
  request.prependOnceListener('error', error => {
    resolve({
      error
    });
  });
});

const collectRequestBody = request => new Promise((resolve, reject) => {
  const requestBody = [];
  const reqWrite = request.write;

  request.write = function (...args) {
    /**
     * chunk can be either a string or a Buffer.
     */
    const chunk = arguments[0];

    if (Buffer.isBuffer(chunk)) {
      requestBody.push(chunk);
    } else {
      requestBody.push(Buffer.from(chunk, 'utf8'));
    }

    return reqWrite.apply(this, args);
  };

  const reqEnd = request.end;

  request.end = function (...args) {
    /**
     * the first argument might be a callback or a chunk
     */
    const maybeChunk = arguments[0];

    if (Buffer.isBuffer(maybeChunk)) {
      requestBody.push(maybeChunk);
    } else if (maybeChunk && typeof maybeChunk !== 'function') {
      requestBody.push(Buffer.from(maybeChunk, 'utf8'));
    }

    return reqEnd.apply(this, args);
  };

  request.prependOnceListener('finish', () => {
    if (!requestBody.length) {
      resolve(null);
    } else {
      resolve(Buffer.concat(requestBody));
    }
  });
  request.prependOnceListener('error', () => resolve(null));
});

const interceptRequest = async (request, {
  onRequestEnd
}) => {
  const [requestBody, {
    response,
    responseBody,
    error
  }] = await Promise.all([collectRequestBody(request), (async () => {
    const {
      response,
      responseBodyCollector,
      error
    } = await waitForResponseOrError(request);

    if (response && responseBodyCollector) {
      return {
        response,
        responseBody: await responseBodyCollector.getBodyAsync(),
        error: null
      };
    } else if (error) {
      return {
        response: null,
        responseBody: null,
        error
      };
    } else {
      throw new Error('No responseBodyCollector');
    }
  })()]);
  const protocol = request.agent.protocol;
  const host = request.getHeader('host');
  const path = request.path;
  const loggerRequest = {
    url: `${protocol}//${host}${path}`,
    method: request.method,
    headers: request._headers,
    body: requestBody ? requestBody : null
  };

  if (response) {
    const loggerResponse = {
      status: response.statusCode,
      body: responseBody ? responseBody : null,
      headers: response.headers
    };
    onRequestEnd({
      request: loggerRequest,
      response: loggerResponse,
      error: null
    });
  } else if (error) {
    const loggerError = {
      message: error.message,
      code: error.code,
      stack: error.stack || ''
    };
    onRequestEnd({
      request: loggerRequest,
      response: null,
      error: loggerError
    });
  }
};

class GlobalHttpLogger {
  constructor({
    onRequestEnd
  }) {
    _defineProperty(this, "onRequestEnd", void 0);

    this.onRequestEnd = onRequestEnd;
  }

  start() {
    const {
      onRequestEnd
    } = this;

    const interceptedRequestMethod = (object, func, ...rest) => {
      const req = func.call(object, ...rest);
      interceptRequest(req, {
        onRequestEnd
      });
      return req;
    };

    _http.default.request = interceptedRequestMethod.bind(null, _http.default, _http.default.request);
    _http.default.get = interceptedRequestMethod.bind(null, _http.default, _http.default.get);
    /**
     * https.request proxies to http.request for 8.x and earlier versions
     */

    if (nodeMajorVersion > 8) {
      _https.default.get = interceptedRequestMethod.bind(null, _https.default, _https.default.get);
      _https.default.request = interceptedRequestMethod.bind(null, _https.default, _https.default.request);
    }
  }

  stop() {}

}

exports.default = GlobalHttpLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,